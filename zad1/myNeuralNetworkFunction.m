function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 12-May-2019 00:19:58.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 6xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;0;0;0;0];
x1_step1.gain = [2;2;2;2;2;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.8155938869850134498;-3.3013291917997933389;1.7700090057992672321;-1.8675610533549571457;0.16369065558764608892;-0.62846459991456460337;0.7912768574570411273;-1.6575353826055814199;-2.9895626429409016822;-3.812057255565870495];
IW1_1 = [0.95786457876787289845 4.9901343481651607971e-07 0.33695146264140829473 -5.9640007585999013293e-05 -2.2102864884543458324 -0.055929868294620314895;7.5896512000050851115e-06 2.1158252901274607893 4.7743309923660547241e-05 -1.1083953726018282993 1.9856999415918907825 -1.4126824907377120155;-0.0019252542731106772438 0.0010434623335246265285 0.013160284059983333796 0.074871502154261429518 0.0016535873389105319991 1.7786852336860565771;1.1973660321923389471 -0.00019720929392417249192 1.6249509781614739357 0.018716706141050205858 -0.44797513040380371185 -0.080134700814176687556;-1.5057841280585326782 -0.13402363128092958933 -0.025053701451000796874 -1.3458746671615400281 0.76373437436267777034 -0.086604697238053987562;-0.48299581591941254111 -0.0039892146080050582338 -1.5802225542899703825 0.28491472971996467667 -0.015820588773032554647 1.1955058475713171706;-0.31397900069426676328 8.6945874456938650707e-07 0.30184000068501426473 -0.00011532998532783801811 2.0725931540413093934 1.4890535145643744031;0.0075476505803648815188 -1.5821017843981997064 -0.033780514039426341732 -1.8291356687332187558 -0.29780800881537383695 -0.5080866298699103778;-0.79452416974175177344 3.556580756577307201e-06 0.63633502381958628735 -0.00039514752843594543605 0.8844079771531156986 -2.8441632652093957745;9.5306095115593815649e-06 -2.3415223341432365167 3.6491076507417412669e-05 -0.92672204815046632653 2.1701989275809312474 -1.7589840484765237871];

% Layer 2
b2 = -1.0928853380234428982;
LW2_1 = [1.2486672953650252982 -1.4330704360608976788 -4.0488181224708545969 -0.0070853723014175258588 -4.7865641604981735909e-06 -0.00051201085521866728564 3.0769105845876350003 -0.001165397983572361235 -0.55232490301648684561 -2.4043746684695594951];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2;
y1_step1.xoffset = 0;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
